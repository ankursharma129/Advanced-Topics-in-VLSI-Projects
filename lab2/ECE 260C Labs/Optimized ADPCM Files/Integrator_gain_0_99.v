// -------------------------------------------------------------
// 
// File Name: adpcm\adpcm_precision_study\Integrator_gain_0_99.v
// Created: 2022-04-30 23:31:54
// 
// Generated by MATLAB 9.10 and HDL Coder 3.18
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Integrator_gain_0_99
// Source Path: adpcm_precision_study/adpcm/ADPCM Decoder1/Integrator -- gain = 0.99
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Integrator_gain_0_99
          (clk,
           reset,
           enb,
           Step_Size,
           LoopGain,
           Out1);


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] Step_Size;  // sfix16_En12
  input   signed [19:0] LoopGain;  // sfix20_En16
  output  signed [15:0] Out1;  // sfix16_En12


  wire signed [19:0] Data_Type_Conversion_out1;  // sfix20_En16
  reg signed [19:0] delayMatch_reg [0:1];  // sfix20 [2]
  wire signed [19:0] delayMatch_reg_next [0:1];  // sfix20_En16 [2]
  wire signed [19:0] LoopGain_1;  // sfix20_En16
  wire signed [19:0] Product_out1;  // sfix20_En16
  wire signed [20:0] Sum2_add_cast;  // sfix21_En16
  wire signed [20:0] Sum2_add_cast_1;  // sfix21_En16
  wire signed [20:0] Sum2_add_temp;  // sfix21_En16
  wire signed [19:0] Sum2_out1;  // sfix20_En16
  reg signed [19:0] Delay_out1;  // sfix20_En16
  wire signed [39:0] Product_mul_temp;  // sfix40_En32
  wire signed [15:0] Data_Type_Conversion1_out1;  // sfix16_En12

  // round back to 16 frac bits
  // 
  // append 0s for better loop accum. precision
  // 
  // Note additional precision inside integrator.


  assign Data_Type_Conversion_out1 = {Step_Size, 4'b0000};



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 20'sb00000000000000000000;
        delayMatch_reg[1] <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign LoopGain_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = LoopGain;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Sum2_add_cast = {Product_out1[19], Product_out1};
  assign Sum2_add_cast_1 = {Data_Type_Conversion_out1[19], Data_Type_Conversion_out1};
  assign Sum2_add_temp = Sum2_add_cast + Sum2_add_cast_1;
  assign Sum2_out1 = ((Sum2_add_temp[20] == 1'b0) && (Sum2_add_temp[19] != 1'b0) ? 20'sb01111111111111111111 :
              ((Sum2_add_temp[20] == 1'b1) && (Sum2_add_temp[19] != 1'b1) ? 20'sb10000000000000000000 :
              $signed(Sum2_add_temp[19:0])));



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= Sum2_out1;
        end
      end
    end



  assign Product_mul_temp = Delay_out1 * LoopGain_1;
  assign Product_out1 = Product_mul_temp[35:16] + $signed({1'b0, Product_mul_temp[15]});



  assign Data_Type_Conversion1_out1 = Product_out1[19:4] + $signed({1'b0, Product_out1[3]});



  assign Out1 = Data_Type_Conversion1_out1;

endmodule  // Integrator_gain_0_99

