// -------------------------------------------------------------
// 
// File Name: Piplined_encoder\adpcm_precision_study\Step_Size_Adaptor1.v
// Created: 2022-04-30 14:10:34
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Step_Size_Adaptor1
// Source Path: adpcm_precision_study/ADPCM_ECD/ADPCM Decoder1/Step Size Adaptor1
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Step_Size_Adaptor1
          (clk,
           reset,
           enb,
           in,
           out);


  input   clk;
  input   reset;
  input   enb;
  input   signed [19:0] in;  // sfix20_En16
  output  signed [19:0] out;  // sfix20_En16


  wire current_previous_out1;
  wire signed [19:0] Saturation_out1;  // sfix20_En16
  reg signed [19:0] Delay1_out1;  // sfix20_En16
  wire signed [19:0] Subsystem_out1;  // sfix20_En16
  wire signed [39:0] Product_mul_temp;  // sfix40_En32
  wire signed [19:0] Product_out1;  // sfix20_En16

  // If current = previous, double step size
  // else halve step size
  // 
  // current = previous?
  // 
  // *2 or /2
  // 
  // limit step range 
  // to 0.01 to 0.5


  current_previous u_current_previous (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .In1(in),  // sfix20_En16
                                       .Out1(current_previous_out1)
                                       );

  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 20'sb00000001101000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Saturation_out1;
        end
      end
    end



  Subsystem u_Subsystem (.In1(current_previous_out1),
                         .In2(Delay1_out1),  // sfix20_En16
                         .Out1(Subsystem_out1)  // sfix20_En16
                         );

  assign Saturation_out1 = (Subsystem_out1 > 20'sb00001000000000000000 ? 20'sb00001000000000000000 :
              (Subsystem_out1 < 20'sb00000000000101001000 ? 20'sb00000000000101001000 :
              Subsystem_out1));



  assign Product_mul_temp = in * Saturation_out1;
  assign Product_out1 = (((Product_mul_temp[39] == 1'b0) && (Product_mul_temp[38:35] != 4'b0000)) || ((Product_mul_temp[39] == 1'b0) && (Product_mul_temp[35:16] == 20'sb01111111111111111111)) ? 20'sb01111111111111111111 :
              ((Product_mul_temp[39] == 1'b1) && (Product_mul_temp[38:35] != 4'b1111) ? 20'sb10000000000000000000 :
              Product_mul_temp[35:16] + $signed({1'b0, Product_mul_temp[15] & (Product_mul_temp[16] | (|Product_mul_temp[14:0]))})));



  assign out = Product_out1;

endmodule  // Step_Size_Adaptor1

